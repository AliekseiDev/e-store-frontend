import React, { Component } from 'react';

import withModal from '$hoc/Modal'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import style from './FilterModal.module.css'
import qs from 'qs';


class FilterModal extends Component {

  /* SET INITIAL VALUE */
  state = {
    query: qs.parse(this.props.query)
  }

  componentDidMount() {
    this.props._onOpen();
    this.props.pushNavPanelItemsState([
      { type: 'empty' },
      {
        type: 'close',
        onClick: this.props._closeModal
      }
    ]);
  }

  componentWillUnmount() {
    this.props.popNavPanelItemsState();
  }

  _onSubmit = (e) => {
    e.preventDefault();
    this.props._closeModal();
    this.props.onSubmit(qs.stringify(this.state.query));
  }

  handleInputChange = (event) => {
    let target = event.target;

    let {value, name} = target;
    if (target.type === 'checkbox') value = target.checked ? value : null;

    this.setState((prevState) => {
      prevState.query[name] = value;
      return prevState;
    });
  }

  renderTags = () => {
    let queryKeys = Object.keys(this.state.query);

    let cleanNames = {};
    queryKeys.forEach((item) => {
      switch(item) {
        case 'string': 
          return cleanNames[item] = 'Title';
        case 'sortByPrice':
          return cleanNames[item] = 'Sorting by price'
        default:
          return;
      }
    });

    return queryKeys
      .filter((item) => {
        let {query} = this.state;
        if (item === 'string') return query[item].length > 0;
        if (item === 'sortByPrice') return query[item];
        return false; 
      })
      .map((item) => {
        return (
          <span 
            key={item}
            className={style.tag}
            onClick={() => {
              let query = {...this.state.query};
              delete query[item];
              this.setState({query});
            }}
          >
            <span>{cleanNames[item] || item}</span>
            <FontAwesomeIcon icon="times"/>
          </span>
        );
      });
  }

  render() {
    let { string, sortByPrice } = this.state.query;
    // eslint-disable-next-line
    sortByPrice = parseInt(sortByPrice);
    return (
      <div className={style.wrapper}>
        {/* <div 
          className={style.close}
          onClick={this.props._closeModal}
        >
          <FontAwesomeIcon icon="times"/>
        </div> */}
        <div className={style.contentWrapper}>
          <form onSubmit={this._onSubmit} autoComplete="off">
            <div className={style.search}>
              <input 
                type="text"
                placeholder="Start typing"
                onChange={this.handleInputChange}
                name="string"
                value={string || ''}
              />
              <button><FontAwesomeIcon icon="search"/></button>
            </div>
            <div className={style.sortItems}>
              <p>Sort by price:</p> 
              <span>
                Asc
                <input
                  value="-1"
                  type="checkbox" 
                  name="sortByPrice"
                  checked={sortByPrice === -1}
                  onChange={this.handleInputChange}
                />
              </span>
              <span>
                Desc
                <input 
                  value="1"
                  type="checkbox" 
                  name="sortByPrice"
                  checked={sortByPrice === 1}
                  onChange={this.handleInputChange}
                />
              </span>
            </div>

            <div className={style.tags}>
              {this.renderTags()}
            </div>
            <button className={style.searchBtn}>Filter</button>
          </form>
        </div>
      </div>
    );
  }

}

export default withModal(FilterModal);