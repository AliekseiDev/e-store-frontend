import qs from 'qs';

const getPhoneById = (phones, id) => {
  return phones[id];
}

export const getPhonesByIds = (phones, ids) => {
  return ids.map(id => getPhoneById(phones, id));
}

export const getTotalBasketCount = ({basket}) => {
  return Object.keys(basket.products).reduce((accumulator, id) => basket.products[id].amount + accumulator, 0);
}

export const getTotalBasketSum = ({basket}) => {
  return Object.keys(basket.products).reduce((accumulator, id) => (basket.products[id].amount * basket.products[id].item.price) + accumulator, 0);
}

export const getBasketProducts = ({basket}) => {
  return Object.keys(basket.products).map((id) => basket.products[id]);
}

export const withBasket = (items, {basket}) => {
  /* let {basket} = state  */
  return items.map( item => {
    let itm = {
      ...item,
      inBasket: item.id in basket.products ? true : false
    };
    return itm;
  });
}

export const withFilter = (_items, _query) => {
  let items = _items;
  let query = qs.parse(_query);

  if (query.sortByPrice) {
    // eslint-disable-next-line
    let val = parseInt(query.sortByPrice);
    items = _items.sort((a, b) => {
      if (val === -1) return a.price - b.price;
      return b.price - a.price;
    });
  }

  if (query.string) {
    items = items.filter((item) => {
      return item.name.toLowerCase().includes(query.string.toLowerCase());
    });
  }

  return items;
}